# R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
# Copyright (C) 2024 The R Foundation for Statistical Computing
# Platform: x86_64-w64-mingw32/x64

# Load required libraries
library(sf)
library(raster)
library(rgdal)

# Step 1: Read the India shapefile
india_sf <- st_read("D:/path_to_your_shapefile/India_boundary.shp")  # change to your correct path

# Step 2: Load the bioclim raster stack
bioclim_folder <- "D:/worldclim2.5/wc2.1_2.5m_bio"
bioclim_files <- list.files(bioclim_folder, pattern = "\\.tif$", full.names = TRUE)
clim_past <- stack(bioclim_files)

# Step 3: Ensure CRS of shapefile matches the raster CRS
if (st_crs(india_sf)$proj4string != crs(clim_past)) {
  india_sf <- st_transform(india_sf, crs = crs(clim_past))
}

# Step 4: Convert sf to sp object for raster cropping
india_sp <- as(india_sf, "Spatial")

# Step 5: Crop the raster stack using India extent
Clim_past_cropped <- crop(clim_past, india_sp)

# Optional: Mask using the exact boundary shape (not just bounding box)
Clim_past_cropped <- mask(Clim_past_cropped, india_sp)

# Step 6: Plot to visualize
plot(Clim_past_cropped)
> # Plot the cropped climate data
> Clim_past_cropped
class      : RasterBrick 
dimensions : 724, 701, 507524, 19  (nrow, ncol, ncell, nlayers)
resolution : 0.04166667, 0.04166667  (x, y)
extent     : 68.16667, 97.375, 6.833333, 37  (xmin, xmax, ymin, ymax)
crs        : +proj=longlat +datum=WGS84 +no_defs 
source     : r_tmp_2024-09-12_223252.118879_2836_10366.grd 
names      : wc2.1_2.5m_bio_1, wc2.1_2.5m_bio_10, wc2.1_2.5m_bio_11, wc2.1_2.5m_bio_12, wc2.1_2.5m_bio_13, wc2.1_2.5m_bio_14, wc2.1_2.5m_bio_15, wc2.1_2.5m_bio_16, wc2.1_2.5m_bio_17, wc2.1_2.5m_bio_18, wc2.1_2.5m_bio_19, wc2.1_2.5m_bio_2, wc2.1_2.5m_bio_3, wc2.1_2.5m_bio_4, wc2.1_2.5m_bio_5, ... 
min values :       -18.705999,         -8.637333,        -29.837334,         21.000000,          5.000000,          0.000000,         25.820114,         13.000000,          0.000000,          0.000000,          0.000000,         4.600000,        24.887877,        39.051250,        -4.428000, ... 
max values :         29.93217,          36.63800,          27.91667,        8626.00000,        2768.00000,         136.00000,         173.26295,        6174.00000,         502.00000,        5608.00000,        5230.00000,         18.17133,         80.57291,       1175.58154,         45.70000, ... 

> # Assuming 'Cim_past_cropped' is your RasterBrick
> # Convert RasterBrick to a data frame (remove NA values to avoid issues)
> clim_data_df <- as.data.frame(Clim_past_cropped, na.rm = TRUE)
> # Apply VIF analysis
> va <- vif(clim_data_df)                    # Basic VIF calculation
> vb <- vifcor(clim_data_df, th = 0.9)       # VIF based on correlation threshold
> vc <- vifstep(clim_data_df, th = 10)       # VIF stepwise reduction based on a threshold of 10
> va
           Variables          VIF
1   wc2.1_2.5m_bio_1 4.025218e+03
2  wc2.1_2.5m_bio_10 5.934296e+03
3  wc2.1_2.5m_bio_11 2.251486e+04
4  wc2.1_2.5m_bio_12 1.225002e+02
5  wc2.1_2.5m_bio_13 6.624997e+01
6  wc2.1_2.5m_bio_14 8.040613e+00
7  wc2.1_2.5m_bio_15 3.881124e+00
8  wc2.1_2.5m_bio_16 2.072961e+02
9  wc2.1_2.5m_bio_17 9.294604e+00
10 wc2.1_2.5m_bio_18 7.224441e+00
11 wc2.1_2.5m_bio_19 1.740756e+00
12  wc2.1_2.5m_bio_2 4.659931e+01
13  wc2.1_2.5m_bio_3 1.933697e+01
14  wc2.1_2.5m_bio_4 2.058367e+03
15  wc2.1_2.5m_bio_5 1.668000e+14
16  wc2.1_2.5m_bio_6 3.002400e+14
17  wc2.1_2.5m_bio_7 6.211862e+13
18  wc2.1_2.5m_bio_8 1.923709e+01
19  wc2.1_2.5m_bio_9 2.625461e+01
> vb
9 variables from the 19 input variables have collinearity problem: 
 
wc2.1_2.5m_bio_6 wc2.1_2.5m_bio_10 wc2.1_2.5m_bio_11 wc2.1_2.5m_bio_16 wc2.1_2.5m_bio_1 wc2.1_2.5m_bio_12 wc2.1_2.5m_bio_5 wc2.1_2.5m_bio_7 wc2.1_2.5m_bio_17 

After excluding the collinear variables, the linear correlation coefficients ranges between: 
min correlation ( wc2.1_2.5m_bio_8 ~ wc2.1_2.5m_bio_19 ):  0.02002934 
max correlation ( wc2.1_2.5m_bio_9 ~ wc2.1_2.5m_bio_8 ):  0.8504751 

---------- VIFs of the remained variables -------- 
           Variables       VIF
1  wc2.1_2.5m_bio_13  3.853632
2  wc2.1_2.5m_bio_14  1.597147
3  wc2.1_2.5m_bio_15  2.457900
4  wc2.1_2.5m_bio_18  2.635442
5  wc2.1_2.5m_bio_19  1.690128
6   wc2.1_2.5m_bio_2  5.293679
7   wc2.1_2.5m_bio_3  7.654178
8   wc2.1_2.5m_bio_4 16.584479
9   wc2.1_2.5m_bio_8  5.323350
10  wc2.1_2.5m_bio_9  5.865358
> vc
10 variables from the 19 input variables have collinearity problem: 
 
wc2.1_2.5m_bio_6 wc2.1_2.5m_bio_11 wc2.1_2.5m_bio_10 wc2.1_2.5m_bio_1 wc2.1_2.5m_bio_16 wc2.1_2.5m_bio_7 wc2.1_2.5m_bio_5 wc2.1_2.5m_bio_12 wc2.1_2.5m_bio_4 wc2.1_2.5m_bio_17 

After excluding the collinear variables, the linear correlation coefficients ranges between: 
min correlation ( wc2.1_2.5m_bio_8 ~ wc2.1_2.5m_bio_14 ):  0.0097087 
max correlation ( wc2.1_2.5m_bio_9 ~ wc2.1_2.5m_bio_8 ):  0.8513595 

---------- VIFs of the remained variables -------- 
          Variables      VIF
1 wc2.1_2.5m_bio_13 3.969606
2 wc2.1_2.5m_bio_14 1.547735
3 wc2.1_2.5m_bio_15 2.300224
4 wc2.1_2.5m_bio_18 2.586545
5 wc2.1_2.5m_bio_19 1.533222
6  wc2.1_2.5m_bio_2 2.393538
7  wc2.1_2.5m_bio_3 1.677065
8  wc2.1_2.5m_bio_8 5.174932
9  wc2.1_2.5m_bio_9 5.092456

> > biom <- exclude (clim_data_df, vc)
Error: unexpected '>' in ">"
> biom <- exclude (clim_data_df, vc)
> biom
    wc2.1_2.5m_bio_13 wc2.1_2.5m_bio_14 wc2.1_2.5m_bio_15 wc2.1_2.5m_bio_18 wc2.1_2.5m_bio_19
1                  40                 0          93.77955                 0                70
2                  41                 0          93.43202                 0                73
3                  42                 0          93.31880                 0                73
4                  43                 0          91.59026                 1                76
5                  44                 0          91.30145                 1                79
6                  45                 0          92.02991                 1                80
7                  46                 0          91.71810                 1                82
8                  47                 0          91.48122                 1                83
9                  48                 0          91.90063                 1                86
10                 50                 0          92.12727                 1                87
11                 52                 0          92.58566                 1                91
12                 53                 0          92.46621                 1                93
13                 55                 0          91.64294                 2                97
14                 58                 0          91.80631                 2               100
15                 60                 0          92.56731                 2               103
16                 62                 0          92.22190                 2               107
17                 65                 0          91.89877                 2               112
18                 71                 0          93.17819                 2               120
19                 78                 0          92.34867                 3               129
20                 86                 1          91.08537                 5               141
21                 81                 0          92.25155                 4               134
22                 79                 0          92.42270                 3               131
23                 77                 0          91.90804                 3               129
24                 77                 0          91.79287                 3               129
25                 79                 0          92.29781                 3               131
26                 81                 0          91.41978                 4               133
27                 85                 0          92.54644                 4               139
28                 96                 1          91.60407                 5               155
29                 97                 1          91.98683                 5               156
30                 96                 1          91.36118                 5               155
31                102                 1          90.65024                 7               165
32                109                 1          90.63735                 8               174
33                109                 1          90.68536                 8               173
34                104                 1          90.76874                 7               167
35                102                 1          90.33579                 7               165
36                101                 1          90.58876                 7               162
37                115                 1          90.71385                 9               183
38                118                 1          90.50626                10               185
39                127                 1          90.60127                12               201
40                137                 1          89.65063                14               212
41                146                 1          89.46957                17               219
42                148                 1          89.50384                17               220
43                139                 1          88.87506                16               211
44                124                 1          88.94996                14               194
45                112                 1          89.18588                11               178
46                107                 1          89.10710                10               171
47                107                 1          88.95952                11               171
48                111                 1          88.26105                13               177
49                121                 1          87.76948                15               186
50                125                 1          87.61886                16               190
51                123                 1          86.98901                17               187
52                119                 1          87.46034                15               182
53                122                 1          86.71461                18               182
54                121                 1          86.78049                18               178
55                118                 1          86.57816                18               173
56                115                 1          86.74429                17               169
57                112                 1          85.61948                19               164
58                110                 2          85.08897                20               159
59                107                 2          84.75767                20               154
60                104                 2          84.55386                20               149
61                100                 2          84.22160                20               144
62                 95                 1          84.83739                17               140
63                 94                 2          83.49844                20               135
64                 87                 1          84.92916                14               135
65                 83                 1          84.28643                13               132
66                 82                 1          84.53738                13               128
67                 80                 1          83.82494                14               121
68                 79                 2          81.79479                18               113
69                 76                 2          81.15462                19               105
70                 71                 2          81.40284                18                96
71                 84                 4          73.75088                31               123
72                 93                 6          70.08414                40               141
73                103                 7          66.58337                36               169
74                 97                 7          67.36289                47               155
75                 69                 3          74.23229                26                94
76                102                 8          64.25932                41               174
77                 85                 6          67.91902                40               134
78                 75                 4          69.60657                33               112
79                 69                 4          70.34519                30               102
80                 46                 2          74.83828                18                59
81                 81                 6          63.91584                46               132
82                 87                 8          61.32473                54               147
83                 98                10          58.77855                51               177
84                 91                 9          58.65965                47               164
85                111                16          53.05432                77               220
86                104                14          53.64427                69               205
87                101                14          53.34825                69               200
88                 81                 9          57.10384                58               148
89                 84                10          55.70381                52               158
90                 94                13          52.47749                66               182
91                 99                16          49.96549                78               198
92                105                18          48.09102                91               214
93                 98                16          49.52142                79               193
94                 85                13          51.11769                63               160
95                 94                16          48.43817                78               184
96                 66                 8          54.21497                42               113
97                 66                 8          54.94985                53               113
98                 42                 4          58.34505                33                64
99                 28                 3          59.45017                22                38
100                21                 2          63.62900                16                27
101                19                 2          64.76218                14                22
102                21                 2          62.08546                17                27
103                19                 2          58.55506                17                27
104                24                 3          57.16151                21                34
105                25                 3          55.31606                24                39
106                20                 3          56.19708                19                26
107                36                 6          50.31546                36                60
108                29                 5          51.97865                29                46
109                34                 5          51.60346                35                55
110                25                 4          53.18411                27                36
111                20                 4          52.34059                22                26
    wc2.1_2.5m_bio_2 wc2.1_2.5m_bio_3 wc2.1_2.5m_bio_8 wc2.1_2.5m_bio_9
1          13.950666         33.19059      11.88866711        30.205334
2          14.176001         33.28950      11.99133396        30.504000
3          14.258333         33.25171      12.16733360        30.782000
4          14.368667         33.32251      12.28866673        30.980000
5          14.361667         33.34340      12.24800014        30.906666
6          14.336666         33.32868      12.13933372        30.751333
7          14.269333         33.19376      11.96333313        30.576000
8          13.972667         32.89544      11.85799980        30.308001
9          13.577000         32.65586      11.90799999        30.018667
10         13.421333         32.49717      11.87533283        29.920000
11         14.171667         33.14545      12.15933323        30.602667
12         14.723333         33.79391      12.36866665        30.914000
13         14.820001         33.88513      12.40600014        29.086666
14         14.761001         33.76258      12.31866646        29.110666
15         14.694667         33.53722      12.18066692        29.138666
16         14.571000         33.21859      11.99800014        29.262667
17         14.408667         33.01106      11.82866669        29.293333
18         14.169667         32.79712      11.48533344        28.948000
19         13.873000         32.58715      10.87866688        28.320667
20         13.635333         32.46817      10.32266617        27.680000
21         14.010333         32.62770      10.94933319        28.449333
22         14.171333         32.80705      11.32266712        28.731333
23         14.309334         32.95866      11.67533302        28.999334
24         14.264001         33.04606      11.68066692        28.851334
25         14.114333         32.97125      11.52533340        28.609333
26         14.147000         32.95825      11.44733334        28.639334
27         14.123333         32.83580      11.38733292        28.793333
28         13.639334         32.35750      10.68599987        28.024668
29         13.552000         32.25438      10.49933338        27.801334
30         13.729667         32.61823      10.76333332        27.940001
31         13.559333         32.74569      10.38133335        27.335333
32         13.350333         32.65098       9.81733322        26.698668
33         13.467000         32.73775       9.92666721        26.862000
34         13.568000         32.74763      10.41199970        27.385334
35         13.540001         32.71796      10.63399982        27.590000
36         13.569667         32.84043      10.84066677        27.766001
37         13.139999         32.79425       9.64733315        26.282000
38         13.220333         33.01451       9.33399963        25.950001
39         12.592334         32.49467       7.67333317        24.027334
40         12.077666         32.17279       6.46000004        22.532665
41         11.507667         31.81022       5.16599989        20.987333
42         11.211333         31.60971       4.43800020        20.202000
43         11.941667         32.49257       5.83400011        21.751333
44         13.098333         33.42094       8.13399982        24.382668
45         13.768333         33.67658       9.59399986        26.174667
46         13.858666         33.49122       9.84599972        26.584667
47         13.816999         33.35828       9.37066650        26.138000
48         13.621000         33.35537       8.44333363        25.063999
49         13.229667         33.32410      12.49866676        23.516666
50         12.850667         33.15788      11.34266663        22.297333
51         12.986333         33.02058      11.27466679        22.262667
52         13.214334         33.23859      11.36333370        22.381334
53         12.543000         32.98012       9.78933334        20.761333
54         12.109333         32.55547       8.60200024        19.685333
55         12.134000         32.35388       8.64733315        19.780666
56         12.139000         32.17846       8.71933365        19.842667
57         11.667999         31.79985       7.58733320        18.722000
58         11.308666         31.50748       6.67799997        17.900000
59         11.061000         31.23165       6.31200027        17.552666
60         11.246333         31.19130       6.57466650        17.906000
61         11.337334         31.32552       6.32800007        17.729334
62         12.188000         32.19569       8.40999985        19.653999
63         11.529667         32.20218       6.91799974        18.152000
64         13.574333         34.26477      11.46466732        22.706667
65         14.373000         35.85720      12.65133286        23.821333
66         13.932667         35.33340      12.04199982        23.204000
67         12.851666         33.97036      10.09666634        21.282000
68         11.794666         33.09390       7.28133297        18.554667
69         11.377666         32.64941       6.37599993        17.686666
70         11.615333         33.02813       6.50399971        17.809334
71         10.879000         32.12177       2.23666668        13.903334
72         10.285666         30.05045      -0.67999995        11.545333
73          9.503000         28.21556      -3.61133337         8.887333
74          9.644000         28.61721      -2.52600002         9.796000
75         10.506666         29.84170       1.28133333        13.490000
76          9.502000         28.19584      -4.58866644         7.945333
77          9.702666         28.07160      -2.63399982        10.039333
78         10.016334         28.64101      -1.12933326        11.514667
79         10.354667         29.88187       0.55266666        12.788000
80         11.629333         32.29653       5.03333330        16.708666
81         10.557667         30.83071      -1.52333331        10.530666
82         10.068666         29.09347      -3.95466661         8.648000
83          9.770000         28.39786      -6.22599983         6.619333
84         10.024667         28.68452      -5.82999992         7.126667
85          9.744666         28.54325      -9.61266708         3.190667
86          9.687000         28.35109      -9.02266693         3.608667
87          9.747666         28.35932      -8.49533272         4.294667
88         10.196334         28.74474      -5.69733334         7.206666
89         10.222000         29.00352      -6.34400034         6.442000
90          9.924334         28.65654      -8.27200031         4.404000
91          9.747666         28.45868      -9.93866634         2.615333
92          9.782667         28.87446     -11.00333309         1.506667
93         10.086000         29.34365      -9.60266685         3.018667
94         10.438334         29.91612      -7.39266682         5.271333
95         10.318334         29.83557      -8.98000050         3.747333
96         10.979000         30.79491      -4.11399984         8.610666
97         11.423333         32.08081      -3.43333340         9.182667
98         12.309000         33.95024       0.64600009        12.900666
99         12.919000         35.54645       4.20933342        15.789333
100        13.056000         35.50914       6.44066668        17.622667
101        12.688666         33.76082       6.64333344        17.990000
102        12.155334         32.62651       4.97733355        16.659334
103        12.160666         32.46654       5.01533318        16.804667
104        11.862333         31.79227       3.40066648        15.304667
105        11.547000         30.97704       2.49133325         5.086000
106        11.673667         31.17966       3.96133327         6.526667
107        11.275666         30.74734      -0.78933322         8.188666
108        11.525000         30.95788       0.09933347         3.272000
109        11.383667         30.48979      -0.87266678         2.279333
110        11.322667         30.16160       1.07066667         3.862667
111        11.441667         30.68458       2.92199993         5.492000
 [ reached 'max' / getOption("max.print") -- omitted 330864 rows ]
> # Get the names of the remaining variables in the biom data frame
> remaining_vars <- colnames(biom)
> remaining_vars
[1] "wc2.1_2.5m_bio_13" "wc2.1_2.5m_bio_14" "wc2.1_2.5m_bio_15" "wc2.1_2.5m_bio_18"
[5] "wc2.1_2.5m_bio_19" "wc2.1_2.5m_bio_2"  "wc2.1_2.5m_bio_3"  "wc2.1_2.5m_bio_8" 
[9] "wc2.1_2.5m_bio_9" 
> # Create a new RasterStack with the corresponding layers from clim_past_cropped
> biom_stack <- stack(clim_past_cropped[[remaining_vars]])
> biom_stack
class      : RasterStack 
dimensions : 724, 701, 507524, 9  (nrow, ncol, ncell, nlayers)
resolution : 0.04166667, 0.04166667  (x, y)
extent     : 68.16667, 97.375, 6.833333, 37  (xmin, xmax, ymin, ymax)
crs        : +proj=longlat +datum=WGS84 +no_defs 
names      : wc2.1_2.5m_bio_13, wc2.1_2.5m_bio_14, wc2.1_2.5m_bio_15, wc2.1_2.5m_bio_18, wc2.1_2.5m_bio_19, wc2.1_2.5m_bio_2, wc2.1_2.5m_bio_3, wc2.1_2.5m_bio_8, wc2.1_2.5m_bio_9 
min values :           5.00000,           0.00000,          25.82011,           0.00000,           0.00000,          4.60000,         24.88788,        -23.18400,        -29.17600 
max values :        2768.00000,         136.00000,         173.26295,        5608.00000,        5230.00000,         18.17133,         80.57291,         36.38400,         34.22600 


# Set the output folder
output_folder <- "D:/india after vif selected past bio MIROC62.5"
dir.create(output_folder, showWarnings = FALSE, recursive = TRUE)

# Save each layer with clean name: bio_13.tif, bio_14.tif, etc.
lapply(1:nlayers(biom_stack), function(i) {
  layer <- biom_stack[[i]]
  original_name <- names(biom_stack)[i]
  
  # Extract just the variable number from the name
  var_num <- sub(".*bio_?", "", original_name)
  clean_name <- paste0("bio_", var_num, ".tif")
  
  # Write the layer as a .tif file
  writeRaster(layer,
              filename = file.path(output_folder, clean_name),
              format = "GTiff",
              overwrite = TRUE)
}) 


library(raster)
library(sp)
library(sf)
library(terra)
library(sdm)
library(dismo)
library(dplyr)
library(tidyr)
install.packages("usdm")
library(usdm)
install.packages("sp")  # if not already installed
library(sp)
memory.limit()
df = read.csv("D:/A.conyzoidesocindia/ACXY.csv")
df
class(df)
head(df)

coordinates(df) <- ~ X + Y
class(df)

head(df)
folder_path <- "D:/india after vif selected past bio MIROC62.5"
# List all TIFF files in the folder
tif_files <- list.files(folder_path, pattern = "\\.tif$", full.names = TRUE)
# Create a raster stack from the TIFF files
env_stack <- stack(tif_files)
print(env_stack)  # View summary of the raster stack
plot(env_stack)

install.packages("biomod2")

library(biomod2)  #  biomod2 4.2-5-2 
myBiomodData <- BIOMOD_FormatingData(
  resp.var = df$Ageratum.conyzoides.L.,  # Response variable from your data frame
  resp.xy = coordinates(df),  # Coordinates
  resp.name = "Ageratum.conyzoides.L.",
  expl.var = env_stack,  # Environmental predictors
  PA.nb.rep = 1,  # Number of pseudo-absences to generate
  PA.strategy = 'random'  # Pseudo-absence strategy
)

#Several trials where done with several models, only few trial are shown in this code
myBiomodModel 1 <- BIOMOD_Modeling(
  bm.format = myBiomodData,           # The formatted data for modeling (previously prepared)
  modeling.id = "my_model",            # A unique identifier for this model run
  models = c("RF", "Maxent", "GLM"),  # Specify the models to be used.
  CV.strategy = "random",              # Use random strategy for cross-validation
  CV.nb.rep = 10,                      # Number of repetitions for cross-validation
  CV.perc = 0.3,                       # Percentage of data for cross-validation (30% as a decimal)
  metric.eval = c("KAPPA", "TSS", "ROC")  # Metrics to evaluate model performance: Kappa, True Skill Statistic, and ROC
)

evaluation_metrics <- get_evaluations(myBiomodModel1)

myBiomodModel 2 <- BIOMOD_Modeling(
  bm.format = myBiomodData,           # The formatted data for modeling (previously prepared)
  modeling.id = "my_model",            # A unique identifier for this model run
  models = c("RF", "BRT", "GLM"),  # Specify the models to be used
  CV.strategy = "random",              # Use random strategy for cross-validation
  CV.nb.rep = 10,                      # Number of repetitions for cross-validation
  CV.perc = 0.3,                       # Percentage of data for cross-validation (30% as a decimal)
  metric.eval = c("KAPPA", "TSS", "ROC")  # Metrics to evaluate model performance: Kappa, True Skill Statistic, and ROC
)
evaluation_metrics <- get_evaluations(myBiomodModel2)

# before the final trial done shown below, with replication 10
myBiomodModel <- BIOMOD_Modeling(
  bm.format = myBiomodData,           # The formatted data for modeling (previously prepared)
  modeling.id = "my_model",            # A unique identifier for this model run
  models = c("RF", "ANN", "GLM"),  # Specify the models to be used
  CV.strategy = "random",              # Use random strategy for cross-validation
  CV.nb.rep = 10,                      # Number of repetitions for cross-validation
  CV.perc = 0.3,                       # Percentage of data for cross-validation (30% as a decimal)
  metric.eval = c("KAPPA", "TSS", "ROC")  # Metrics to evaluate model performance: Kappa, True Skill Statistic, and ROC
)

evaluation_metrics <- get_evaluations(myBiomodModel)

# Plot response curves for the models
plot(myBiomodModel, "response")
summary(myBiomodModel)
# Convert evaluation metrics to a data frame
evaluation_df <- as.data.frame(evaluation_metrics)


# Save the data frame as a CSV file
write.csv(evaluation_df, "D:/A.conyzoidesocindia/R/ACNEWbiomod2/evaluation_metrics.csv", row.names = FALSE)
# Plotting TSS for each model
library(ggplot2)

# Inspect the evaluation metrics data frame
head(evaluation_metrics)


library(ggplot2)
library(dplyr)

# Filter the evaluation metrics for TSS
tss_metrics <- evaluation_metrics %>%
  filter(metric.eval == "TSS")

# Create the bar plot
ggplot(tss_metrics, aes(x = full.name, y = run, fill = algo)) +  # Adjust y-axis based on what you want to plot
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Model TSS Comparison", x = "Models", y = "TSS") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

save.image(file = "D:/A.conyzoidesocindia/R/ACNEWbiomod2/2ndsavemy_modelrun10.RData")

save(myBiomodData, file = "D:/A.conyzoidesocindia/R/ACNEWbiomod2/2ndsavemy_modelrun10.RData")
save(myBiomodModel, evaluation_df, file = "D:/A.conyzoidesocindia/R/ACNEWbiomod2/2ndsaveobjects.RData")

library(biomod2)
myBiomodModel00 <- BIOMOD_Modeling(
  bm.format = myBiomodData,           # The formatted data for modeling (previously prepared)
  modeling.id = "my_model",            # A unique identifier for this model run
  models = c("RF", "ANN", "GLM"),  # Specify the models to be used
  CV.strategy = "random",              # Use random strategy for cross-validation
  CV.nb.rep = 100,                      # Number of repetitions for cross-validation
  CV.perc = 0.3,                       # Percentage of data for cross-validation (30% as a decimal)
  metric.eval = c("KAPPA", "TSS", "ROC"),
  var.import=3,
  seed.val = 42)# Metrics to evaluate model performance: Kappa, True Skill Statistic, and ROC

myBiomodModel00

# Model ensemble models
myBiomodEM1 <- BIOMOD_EnsembleModeling(bm.mod = myBiomodModel00,
                                      models.chosen = "all",
                                      em.by = 'all',
                                      em.algo = c('EMmean', 'EMca'),
                                      metric.select = c('TSS'),
                                      metric.select.thresh = c(0.7),
                                      metric.eval = c('TSS', 'ROC', 'KAPPA'),
                                      var.import = 3,
                                      seed.val = 42)


myBiomodEM1
# Get evaluation scores & variables importance
evaluation_scores <- get_evaluations(myBiomodEM1)
variable_importance <- get_variables_importance(myBiomodEM1)

# Convert evaluation scores to data frame
evaluation_scores_df <- as.data.frame(evaluation_scores)

# Convert variable importance to data frame
variable_importance_df <- as.data.frame(variable_importance)


# Define the folder path (update with your actual path)
folder_path <- "D:/A.conyzoidesocindia/R/ACNNEW3"

# Save evaluation scores as CSV
write.csv(evaluation_scores_df, paste0(folder_path, "evaluation_scores1.csv"), row.names = FALSE)

# Save variable importance as CSV
write.csv(variable_importance_df, paste0(folder_path, "variable_importance1.csv"), row.names = FALSE)

# Represent evaluation scores
bm_PlotEvalMean(bm.out = myBiomodEM, dataset = 'calibration')
bm_PlotEvalBoxplot(bm.out = myBiomodEM, group.by = c('algo', 'algo'))

# # Represent variables importance
p <-bm_PlotVarImpBoxplot(bm.out = myBiomodEM1, group.by = c('expl.var', 'algo', 'algo'))
# Assuming you can extract the variable importance data from myBiomodEM1
library(ggplot2)

library(ggplot2)
library(ggplot2)

# Create the boxplot with customizations
library(ggplot2)

# Create the boxplot with customizations
library(ggplot2)

# Create the boxplot with customizations
library(ggplot2)
library(RColorBrewer)

library(ggplot2)
library(RColorBrewer)

# Create the boxplot with customizations
ggplot(variable_importance, aes(x = expl.var, y = var.imp, fill = expl.var)) + 
  geom_boxplot(color = "black") +  # Set border color
  scale_x_discrete(labels = c("indiabio13" = "bio_13",
                              "indiabio14" = "bio_14",
                              "indiabio15" = "bio_15",
                              "indiabio18" = "bio_18",
                              "indiabio19" = "bio_19",
                              "indiabio2" = "bio_2",
                              "indiabio3" = "bio_3",
                              "indiabio8" = "bio_8",
                              "indiabio9" = "bio_9")) +
  labs(x = "Bioclimatic Variables", y = "Variable Importance", fill = "Bioclimatic Variables") +  # Change axis labels and legend title
  ggtitle("Variable Importance by Bioclimatic Variables") +  # Update title
  theme_minimal() +
  theme(
    plot.title = element_text(size = 10, hjust = 0.5, margin = margin(b = 10)),  # Center title, size 10, and margin
    axis.title.x = element_text(size = 8, margin = margin(t = 10)),  # Increase space above x-axis title
    axis.title.y = element_text(size = 8, margin = margin(r = 10)),  # Increase space to the right of y-axis title
    axis.text.x = element_text(size = 6),  # X-axis tick label size
    axis.text.y = element_text(size = 6),  # Y-axis tick label size
    legend.title = element_text(size = 8),  # Legend title size
    legend.text = element_text(size = 6),   # Legend text size
    plot.margin = margin(10, 10, 10, 10)   # Increase overall plot margins
  ) +
  scale_fill_brewer(palette = "Set3", labels = c("bio_13", "bio_14", "bio_15", "bio_18", "bio_19", "bio_2", "bio_3", "bio_8", "bio_9"))  # Match legend labels with x ticks



bm_PlotVarImpBoxplot(bm.out = myBiomodEM1, group.by = c('expl.var', 'algo', 'merged.by.PA'))
bm_PlotVarImpBoxplot(bm.out = myBiomodEM1, group.by = c('algo', 'expl.var', 'merged.by.PA'))


# # Represent response curves
 bm_PlotResponseCurves(bm.out = myBiomodEM, 
                       models.chosen = get_built_models(myBiomodEM),
                       fixed.var = 'median')
 
 bm_PlotResponseCurves(bm.out = myBiomodEM, 
                       models.chosen = get_built_models(myBiomodEM),
                       fixed.var = 'min')

 
 # Projecting the current data using the existing model
 current_projection <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,
   new.env = env_stack,  # Use the same environmental variables
   proj.name = "Current_Climate",
   selected.models = "all"
 )

 # Project ensemble models (from single projections)
 myBiomodEMProj <- BIOMOD_EnsembleForecasting(bm.em = myBiomodEM1, 
                                              bm.proj = current_projection,
                                              models.chosen = 'all',
                                              metric.binary = 'all',
                                              metric.filter = 'all')
 library(tidyterra)
 myBiomodEMProj
 plot(myBiomodEMProj)
 
 library(raster)
 
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemble_rasterCURRENT <- get_predictions(myBiomodEMProj)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df <- as.data.frame(ensemble_rasterCURRENT, xy = TRUE)
 
 str(raster_df)  # Check what the column name is for the raster values
 
 ggplot(raster_df) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Current Distribution of Ageratum conyzoides") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 
 # Set the path to the folder containing future climate data
 fut_clim_1 <- "D:/INDIA MIROC6 2.5 FUT/ssp126F21-40"
 
 # Load all raster files from the folder
 fut_clim_1 <- list.files(fut_clim_1, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_126f21_40 <- stack(fut_clim_1)
 
 # Check the stack
 print(env_126f21_40)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_126_21_40 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_126f21_40,                   # Future environmental raster stack
   proj.name = "Future_bio_126(21-40)",           # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_126_21_40,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future)  # Default plot
 myBiomodEMProj_Future
# Extract the ensemble projection from your result (assuming it's a raster)
ensemfu126_21_40 <- get_predictions(myBiomodEMProj_Future)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df1 <- as.data.frame(ensemfu126_21_40, xy = TRUE)
 
 str(raster_df1)  # Check what the column name is for the raster values
 
 ggplot(raster_df1) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP126(2021-2040)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 
 ####################################
 # Set the path to the folder containing future climate data
 fut_clim_2 <- "D:/INDIA MIROC6 2.5 FUT/SSP126F41-60"
 
 # Load all raster files from the folder
 fut_clim_2 <- list.files(fut_clim_2, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_126f41_60 <- stack(fut_clim_2)
 
 # Check the stack
 print(env_126f41_60)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_126_41_60 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_126f41_60,                   # Future environmental raster stack
   proj.name = "Future_bio_126(41-60)",           # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future1 <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_126_41_60,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future1)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future1)  # Default plot
 myBiomodEMProj_Future1
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu126_41_60 <- get_predictions(myBiomodEMProj_Future1)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df2 <- as.data.frame(ensemfu126_41_60, xy = TRUE)
 
 str(raster_df2)  # Check what the column name is for the raster values
 
 ggplot(raster_df2) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP126(2041-2060)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 
 #######################################################
 # Set the path to the folder containing future climate data
 fut_clim_3 <- "D:/INDIA MIROC6 2.5 FUT/ssp126F61-80"
 
 # Load all raster files from the folder
 fut_clim_3 <- list.files(fut_clim_3, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_126f61_80 <- stack(fut_clim_3)
 
 # Check the stack
 print(env_126f61_80)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_126_61_80 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_126f61_80,                   # Future environmental raster stack
   proj.name = "Future_bio_126(61-80)",           # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future2 <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_126_61_80,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future2)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future2)  # Default plot
 myBiomodEMProj_Future2
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu126_61_80 <- get_predictions(myBiomodEMProj_Future2)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df3 <- as.data.frame(ensemfu126_61_80, xy = TRUE)
 
 str(raster_df3)  # Check what the column name is for the raster values
 
 ggplot(raster_df3) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP126(2061-2080)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 ###########################################################
 #######################################################
 # Set the path to the folder containing future climate data
 fut_clim_4 <- "D:/INDIA MIROC6 2.5 FUT/SSP126F81-100"
 
 # Load all raster files from the folder
 fut_clim_4 <- list.files(fut_clim_4, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_126f81_100 <- stack(fut_clim_4)
 
 # Check the stack
 print(env_126f81_100)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_126_81_100 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_126f81_100,                   # Future environmental raster stack
   proj.name = "Future_bio_126(81-100)",           # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future3 <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_126_81_100,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future3)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future3)  # Default plot
 myBiomodEMProj_Future3
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu126_81_100 <- get_predictions(myBiomodEMProj_Future3)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df4 <- as.data.frame(ensemfu126_81_100, xy = TRUE)
 
 str(raster_df4)  # Check what the column name is for the raster values
 
 ggplot(raster_df4) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP126(2081-2100)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 
 #########################################
 
 
 
# SSP585(a1-d1)
 # Set the path to the folder containing future climate data
 fut_clim_a1 <- "D:/INDIA MIROC6 2.5 FUT/ssp585F21-40"
 
 # Load all raster files from the folder
 fut_clim_a1 <- list.files(fut_clim_a1, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_585f21_40 <- stack(fut_clim_a1)
 
 # Check the stack
 print(env_585f21_40)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_585_21_40 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_585f21_40,                   # Future environmental raster stack
   proj.name = "Future_bio_585(21-40)",           # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Futurea1 <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_585_21_40 ,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Futurea1)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Futurea1)  # Default plot
 myBiomodEMProj_Futurea1
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu585_21_40 <- get_predictions(myBiomodEMProj_Futurea1)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_dfa1 <- as.data.frame(ensemfu585_21_40, xy = TRUE)
 
 str(raster_dfa1)# Check what the column name is for the raster values
 
 ggplot(raster_dfa1) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP585(2021-2040)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 ###############################################################
 # SSP585(a1-d1)
 # Set the path to the folder containing future climate data
 fut_clim_b1 <-  "D:/INDIA MIROC6 2.5 FUT/ssp585F41-60"
 
 # Load all raster files from the folder
 fut_clim_b1 <- list.files(fut_clim_b1, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_585f41_60 <- stack(fut_clim_b1)
 
 # Check the stack
 print(env_585f41_60)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_585_41_60 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_585f41_60,                   # Future environmental raster stack
   proj.name = "Future_bio_585(41_60)N", # here the above result may have over written correct
   selected.models = "all",               # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Futureb1 <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_585_41_60 ,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Futureb1)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Futureb1)  # Default plot
 myBiomodEMProj_Futureb1
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu585_41_60 <- get_predictions(myBiomodEMProj_Futureb1)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_dfb1 <- as.data.frame(ensemfu585_41_60, xy = TRUE)
 
 str(raster_dfb1)# Check what the column name is for the raster values
 
 ggplot(raster_dfb1) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP585(2041-2060)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 ###############################################################
 # SSP585(a1-d1)
 # Set the path to the folder containing future climate data
 fut_clim_c1 <-  "D:/INDIA MIROC6 2.5 FUT/ssp585F61-80"
 
 # Load all raster files from the folder
 fut_clim_c1 <- list.files(fut_clim_c1, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_585f61_80 <- stack(fut_clim_c1)
 
 # Check the stack
 print(env_585f61_80)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_585_61_80 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_585f61_80,                   # Future environmental raster stack
   proj.name = "Future_bio_585(61-80)",           # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Futurec1 <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_585_61_80 ,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Futurec1)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Futurec1)  # Default plot
 myBiomodEMProj_Futurec1
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu585_61_80 <- get_predictions(myBiomodEMProj_Futurec1)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_dfc1 <- as.data.frame(ensemfu585_61_80, xy = TRUE)
 
 str(raster_dfc1)# Check what the column name is for the raster values
 
 ggplot(raster_dfc1) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP585(2061-2080)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 
 ###############################################################
 # SSP585(a1-d1)
 # Set the path to the folder containing future climate data
 fut_clim_d1 <-  "D:/INDIA MIROC6 2.5 FUT/ssp585F20181-100"
 
 # Load all raster files from the folder
 fut_clim_d1 <- list.files(fut_clim_d1, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_585f81_100 <- stack(fut_clim_d1)
 
 # Check the stack
 print(env_585f81_100)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_585_81_100 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_585f81_100,                   # Future environmental raster stack
   proj.name = "Future_bio_585(81-100)",         # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Futured1 <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_585_81_100,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Futured1)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Futured1)  # Default plot
 myBiomodEMProj_Futured1
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu585_81_100 <- get_predictions(myBiomodEMProj_Futured1)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_dfd1 <- as.data.frame(ensemfu585_81_100, xy = TRUE)
 
 str(raster_dfd1)# Check what the column name is for the raster values
 
 ggplot(raster_dfd1) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP585(2081-2100)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
   
   
 #############################################################
 # SSP245(1A-4A)
 # Set the path to the folder containing future climate data
 fut_clim_1A <-  "D:/INDIA MIROC6 2.5 FUT/SSP245F21-40"
 
 # Load all raster files from the folder
 fut_clim_1A <- list.files(fut_clim_1A, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_245f21_40 <- stack(fut_clim_1A)
 
 # Check the stack
 print( env_245f21_40)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_245_21_40 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_245f21_40,                  # Future environmental raster stack
   proj.name = "Future_bio_245(21-40)",         # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future1A <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_245_21_40,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future1A)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future1A)  # Default plot
 myBiomodEMProj_Future1A
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu245_21_40 <- get_predictions(myBiomodEMProj_Future1A)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df1A <- as.data.frame(ensemfu245_21_40, xy = TRUE)
 
 str(raster_df1A)# Check what the column name is for the raster values
 
 ggplot(raster_df1A) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP245(2021-2040)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 #############################################################
 
 
 # SSP245(1A-4A)
 # Set the path to the folder containing future climate data
 fut_clim_2A <-  "D:/INDIA MIROC6 2.5 FUT/ssp245F41-60"
 
 # Load all raster files from the folder
 fut_clim_2A <- list.files(fut_clim_2A, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_245f41_60 <- stack(fut_clim_2A)
 
 # Check the stack
 print( env_245f41_60)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_245_41_60 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_245f41_60,                  # Future environmental raster stack
   proj.name = "Future_bio_245(41-60)",         # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future2A <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_245_41_60,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future2A)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future2A)  # Default plot
 myBiomodEMProj_Future2A
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu245_41_60 <- get_predictions(myBiomodEMProj_Future2A)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df2A <- as.data.frame(ensemfu245_41_60, xy = TRUE)
 
 str(raster_df2A)# Check what the column name is for the raster values
 
 ggplot(raster_df2A) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP245(2041-2060)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 #############################################################
 
 
 # SSP245(1A-4A)
 # Set the path to the folder containing future climate data
 fut_clim_3A <-  "D:/INDIA MIROC6 2.5 FUT/ssp245F61-80"
 
 # Load all raster files from the folder
 fut_clim_3A <- list.files(fut_clim_3A, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_245f61_80 <- stack(fut_clim_3A)
 
 # Check the stack
 print( env_245f61_80)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_245_61_80 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_245f61_80,                  # Future environmental raster stack
   proj.name = "Future_bio_245(61-80)",         # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future3A <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_245_61_80,            # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future3A)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future3A)  # Default plot
 myBiomodEMProj_Future3A
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu245_61_80 <- get_predictions(myBiomodEMProj_Future3A)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df3A <- as.data.frame(ensemfu245_61_80, xy = TRUE)
 
 str(raster_df3A)# Check what the column name is for the raster values
 
 ggplot(raster_df3A) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP245(2061-2080)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 #############################################################
 
 
 # SSP245(1A-4A)
 # Set the path to the folder containing future climate data
 fut_clim_4A <-  "D:/INDIA MIROC6 2.5 FUT/ssp245F81-100"
 
 # Load all raster files from the folder
 fut_clim_4A <- list.files(fut_clim_4A, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_245f81_100<- stack(fut_clim_4A)
 
 # Check the stack
 print( env_245f81_100)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_245_81_100 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_245f81_100,                # Future environmental raster stack
   proj.name = "Future_bio_245(81-100)",     # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future4A <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj = future_245_81_100,           # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future4A)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future4A)  # Default plot
 myBiomodEMProj_Future4A
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu245_81_100 <- get_predictions(myBiomodEMProj_Future4A)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df4A <- as.data.frame(ensemfu245_81_100, xy = TRUE)
 
 str(raster_df4A)# Check what the column name is for the raster values
 
 ggplot(raster_df4A) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP245(2081-2100)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 ###################################################################
 
 #ssp3704B-1B
 
 # Set the path to the folder containing future climate data
 fut_clim_4B <-  "D:/INDIA MIROC6 2.5 FUT/ssp370F21-40"
 
 # Load all raster files from the folder
 fut_clim_4B <- list.files(fut_clim_4B, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_370f21_40<- stack(fut_clim_4B)
 
 # Check the stack
 print( env_370f21_40)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_370_21_40 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_370f21_40,                # Future environmental raster stack
   proj.name = "Future_bio_370(21-40)",     # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future4B <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj =  future_370_21_40,           # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future4B)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future4B)  # Default plot
 myBiomodEMProj_Future4B
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu370_21_40 <- get_predictions(myBiomodEMProj_Future4B)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df4B <- as.data.frame( ensemfu370_21_40, xy = TRUE)
 
 str(raster_df4B)# Check what the column name is for the raster values
 
 ggplot(raster_df4B) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP370(2021-2040)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 ###################################################################
 
 #ssp3704B-1B
 
 # Set the path to the folder containing future climate data
 fut_clim_3B <-  "D:/INDIA MIROC6 2.5 FUT/SSP370F41-60"
 
 # Load all raster files from the folder
 fut_clim_3B <- list.files(fut_clim_3B, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_370f41_60<- stack(fut_clim_3B)
 
 # Check the stack
 print( env_370f41_60)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_370_41_60 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_370f41_60,                # Future environmental raster stack
   proj.name = "Future_bio_370(41-60)",     # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future3B <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj =  future_370_41_60,           # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future3B)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future3B)  # Default plot
 myBiomodEMProj_Future3B
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu370_41_60 <- get_predictions(myBiomodEMProj_Future3B)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df3B <- as.data.frame( ensemfu370_41_60, xy = TRUE)
 
 str(raster_df3B)# Check what the column name is for the raster values
 
 ggplot(raster_df3B) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP370(2041-2060)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels
 
 ###################################################################
 
 #ssp3704B-1B
 
 # Set the path to the folder containing future climate data
 fut_clim_2B <-  "D:/INDIA MIROC6 2.5 FUT/ssp370F61-80"
 
 # Load all raster files from the folder
 fut_clim_2B <- list.files(fut_clim_2B, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_370f61_80<- stack(fut_clim_2B)
 
 # Check the stack
 print( env_370f61_80)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_370_61_80 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_370f61_80,                # Future environmental raster stack
   proj.name = "Future_bio_370(61-80)",     # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future2B <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj =  future_370_61_80,           # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future2B)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future2B)  # Default plot
 myBiomodEMProj_Future2B
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu370_61_80 <- get_predictions(myBiomodEMProj_Future2B)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_raster is a SpatRaster object
 raster_df2B <- as.data.frame( ensemfu370_61_80, xy = TRUE)
 
 str(raster_df2B)# Check what the column name is for the raster values
 
 ggplot(raster_df2B) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP370(2061-2080)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels

 
 #########################################################################
 #ssp3704B-1B
 
 # Set the path to the folder containing future climate data
 fut_clim_1B <-  "D:/INDIA MIROC6 2.5 FUT/SSP370F81-100"
 
 # Load all raster files from the folder
 fut_clim_1B <- list.files(fut_clim_1B, pattern = ".tif$", full.names = TRUE)
 
 # Create a raster stack from the future climate files (using underscores instead of hyphens in object names)
 env_370f81_100 <- stack(fut_clim_1B)
 
 # Check the stack
 print( env_370f81_100)
 
 
 
 # Step 2: Project the future climate data using the existing model
 future_370_81_100 <- BIOMOD_Projection(
   bm.mod = myBiomodModel00,              # Your existing model
   new.env = env_370f81_100,                # Future environmental raster stack
   proj.name = "Future_bio_370(81-100)", # Name for the projection
   selected.models = "all"                 # Choose all models
 )
 
 # Step 3: Ensemble forecasting based on the future projections
 myBiomodEMProj_Future1B <- BIOMOD_EnsembleForecasting(
   bm.em = myBiomodEM1,                   # Your ensemble model
   bm.proj =   future_370_81_100,           # Use the future projection
   models.chosen = 'all',                  # Include all models in the ensemble
   metric.binary = 'all',                  # Use all binary metrics
   metric.filter = 'all'                   # Use all filter metrics
 )
 
 # Check the results of the future ensemble projections
 print(myBiomodEMProj_Future1B)
 
 # Optional: Plot the results to visualize the future ensemble predictions
 plot(myBiomodEMProj_Future1B)  # Default plot
 myBiomodEMProj_Future1B
 # Extract the ensemble projection from your result (assuming it's a raster)
 ensemfu370_81_100 <- get_predictions(myBiomodEMProj_Future1B)
 library(ggplot2)
 library(rasterVis)  # Helps plot raster objects with ggplot2
 library(terra)
 
 
 # Assuming ensemble_rasterCURRENT is a SpatRaster object
 raster_df1B <- as.data.frame( ensemfu370_81_100, xy = TRUE)
 
 str(raster_df1B)# Check what the column name is for the raster values
 
 ggplot(raster_df1B) +
   geom_tile(aes(x = x, y = y, fill = Ageratum.conyzoides.L._EMmeanByTSS_mergedData_mergedRun_mergedAlgo)) + 
   scale_fill_viridis_c(guide = guide_colorbar(title = NULL)) +  # Remove legend heading
   ggtitle("Distribution of Ageratum conyzoides (SSP370(2081-2100)") +  # Update title
   theme_minimal() +
   theme(plot.title = element_text(size = 10, hjust = 0.5),  # Center title and set size
         axis.title.x = element_text(size = 8),
         axis.title.y = element_text(size = 8),
         axis.text.x = element_text(size = 6),
         axis.text.y = element_text(size = 6),
         legend.title = element_blank()) +  # Ensure no title for the legend
   labs(x = "Longitude", y = "Latitude")  # Update axis labels

